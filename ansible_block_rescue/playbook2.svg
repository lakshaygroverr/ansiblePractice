<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.44.0 (0)
 --><!-- Pages: 1 --><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1504pt" height="184pt" viewBox="0.00 0.00 1504.18 184.00" id="svg">
<script type="text/javascript" href="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js" id="jquery"/><script type="text/javascript" id="my_javascript"><![CDATA[/**
 * This file contains the functions responsible to highlight the plays, roles and tasks when rendering the SVG file in a browser
 * or any SVG reader that support Javascript.
 */

/**
 * The name of the CSS class for highlighted elements
 * @type {string}
 */
const HIGHLIGHT_CLASS = "highlight";

/**
 * The current selected element on the graph
 * @type {null}
 */
let currentSelectedElement = null;

/**
 * Highlight the linked nodes of the given root element
 * @param {Element} parentElement
 * @param {string[]} visitedElements
 */
function highlightLinkedNodes(parentElement, visitedElements = []) {
    $(parentElement).find('link').each(function (index, element) {
        const linkedElementId = $(element).attr('target');
        const edgeId = $(element).attr('edge');

        const currentElement = $(`#${linkedElementId}`);
        currentElement.addClass(HIGHLIGHT_CLASS);

        // Highlight the edge point to the target
        $(`#${edgeId}`).addClass(HIGHLIGHT_CLASS);

        if (!visitedElements.includes(linkedElementId)) {
            visitedElements.push(linkedElementId);
            // Recursively highlight
            highlightLinkedNodes(currentElement, visitedElements);
        }
    })
}


/**
 * Unhighlight the linked nodes of the given root element
 * @param {Element} parentElement
 * @param {string[]} visitedElements
 * @param {boolean} isHover True when we are coming from a mouseleave event. In that case, we should not unhighlight if
 * the parentElement is the current selected element
 */
function unHighlightLinkedNodes(parentElement, visitedElements = [], isHover) {
    const currentSelectedElementId = $(currentSelectedElement).attr('id');
    // Do not unhighlight the current selected element
    if ($(parentElement).attr('id') !== currentSelectedElementId || !isHover) {

        $(parentElement).find('link').each(function (index, element) {
            const linkedElementId = $(element).attr('target');
            const edgeId = $(element).attr('edge');

            const linkedElement = $(`#${linkedElementId}`);

            if (linkedElement.attr('id') !== currentSelectedElementId) {
                linkedElement.removeClass(HIGHLIGHT_CLASS);

                // Unhighlight the edge point to the target
                $(`#${edgeId}`).removeClass(HIGHLIGHT_CLASS);

                if (!visitedElements.includes(linkedElementId)) {
                    visitedElements.push(linkedElementId);
                    // Recursively unhighlight
                    unHighlightLinkedNodes(linkedElement, visitedElements, isHover);
                }
            }

        })
    }

}

/**
 * Hover handler for mouseenter event
 * @param {Event} event
 */
function hoverMouseEnter(event) {
    highlightLinkedNodes(event.currentTarget, []);
}

/**
 * Hover handler for mouseleave event
 * @param {Event} event
 */
function hoverMouseLeave(event) {
    unHighlightLinkedNodes(event.currentTarget, [], true);
}

/**
 * Handler when clicking on some elements
 * @param {Event} event
 */
function clickOnElement(event) {
    const newClickedElement = $(event.currentTarget);

    event.preventDefault(); // Disable the default click behavior since we override it here

    if (newClickedElement.attr('id') === $(currentSelectedElement).attr('id')) { // clicking again on the same element
        newClickedElement.removeClass(HIGHLIGHT_CLASS);
        unHighlightLinkedNodes(currentSelectedElement, [], false);
        currentSelectedElement = null;
    } else { // clicking on a different node

        // Remove highlight from all the nodes linked to the current selected node
        unHighlightLinkedNodes(currentSelectedElement, [], false);
        if (currentSelectedElement) {
            currentSelectedElement.removeClass(HIGHLIGHT_CLASS);
        }

        newClickedElement.addClass(HIGHLIGHT_CLASS);
        highlightLinkedNodes(newClickedElement, []);
        currentSelectedElement = newClickedElement;
    }
}

/**
 * Handler when double clicking on some elements
 * @param {Event} event
 */
function dblClickElement(event) {
    const newElementDlbClicked = event.currentTarget;
    const links = $(newElementDlbClicked).find("a[xlink\\:href]");

    if (links.length > 0) {
        document.location = $(links[0]).attr("xlink:href");
    } else {
        console.log("No links found on this element");
    }
}


$("#svg").ready(function () {
    let playbooks = $("g[id^=playbook_]");
    let plays = $("g[id^=play_]");
    let roles = $("g[id^=role_]");
    let blocks = $("g[id^=block_]");
    let tasks = $("g[id^=pre_task_], g[id^=task_], g[id^=post_task_]");

    playbooks.hover(hoverMouseEnter, hoverMouseLeave);
    playbooks.click(clickOnElement);
    playbooks.dblclick(dblClickElement);

    // Set hover and click events on the plays
    plays.hover(hoverMouseEnter, hoverMouseLeave);
    plays.click(clickOnElement);
    plays.dblclick(dblClickElement);

    // Set hover and click events on the roles
    roles.hover(hoverMouseEnter, hoverMouseLeave);
    roles.click(clickOnElement);
    roles.dblclick(dblClickElement);

    // Set hover and click events on the blocks
    blocks.hover(hoverMouseEnter, hoverMouseLeave);
    blocks.click(clickOnElement);
    blocks.dblclick(dblClickElement);

    // Set hover and click events on the tasks
    tasks.hover(hoverMouseEnter, hoverMouseLeave);
    tasks.click(clickOnElement);
    tasks.dblclick(dblClickElement);

});
]]></script><style type="text/css" id="my_css"><![CDATA[/**
 Hover on nodes, edges, path and polygon
 */
.node:hover, .edge:hover, path:hover, path + polygon:hover {
    cursor: pointer;
    stroke-width: 3;
    font-weight: bolder;
}

/**
 Manually added class by the script highlight-hover.js when hovering on plays and roles
 */
.highlight {
    cursor: pointer;
    stroke-width: 3;
    font-weight: bolder;
}
]]></style><g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 180)">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-180 1500.18,-180 1500.18,4 -4,4"/>
<g id="clust2" class="cluster">
<title>cluster_block_c8d755eb</title>
<polygon fill="none" stroke="black" points="919.09,-8 919.09,-168 1488.18,-168 1488.18,-8 919.09,-8"/>
</g>
<!-- playbook_5df8cb54 -->
<g id="playbook_5df8cb54" class="node">
<title>playbook_5df8cb54</title>
<g id="a_playbook_5df8cb54"><a xlink:href="/home/student/ansible_examples/ansible_block_rescue/playbook2.yaml" xlink:title="playbook2.yaml">
<ellipse fill="none" stroke="black" stroke-dasharray="1,5" cx="82.54" cy="-88" rx="82.59" ry="18"/>
<text text-anchor="middle" x="82.54" y="-84.3" font-family="Times-Roman" font-size="14.00">playbook2.yaml</text>
</a>
</g>
<links><link target="play_72c4d77c" edge="edge_1_playbook_5df8cb54_play_72c4d77c"/></links></g>
<!-- play_72c4d77c -->
<g id="play_72c4d77c" class="node">
<title>play_72c4d77c</title>
<g id="a_play_72c4d77c"><a xlink:href="/home/student/ansible_examples/ansible_block_rescue/playbook2.yaml" xlink:title="node1">
<polygon fill="#458759" stroke="#458759" points="881.09,-106 540.09,-106 540.09,-70 881.09,-70 881.09,-106"/>
<text text-anchor="middle" x="710.59" y="-84.3" font-family="Times-Roman" font-size="14.00" fill="#ffffff">Play: Demonstrate block.rescue and always (1)</text>
</a>
</g>
<links><link target="block_c8d755eb" edge="edge_1_play_72c4d77c_block_c8d755eb"/></links></g>
<!-- playbook_5df8cb54&#45;&gt;play_72c4d77c -->
<g id="edge_playbook_5df8cb54_play_72c4d77c" class="edge">
<title>playbook_5df8cb54-&gt;play_72c4d77c</title>
<g id="a_edge_playbook_5df8cb54_play_72c4d77c"><a xlink:title="1 Play: Demonstrate block.rescue and always (1)">
<path fill="none" stroke="#458759" d="M165.39,-88C257.42,-88 409.71,-88 529.82,-88" id="path_edge_playbook_5df8cb54_play_72c4d77c"/>
<polygon fill="#458759" stroke="#458759" points="529.87,-91.5 539.87,-88 529.87,-84.5 529.87,-91.5"/>
</a>
</g>
<g id="a_edge_playbook_5df8cb54_play_72c4d77c-label"><a xlink:title="1 Play: Demonstrate block.rescue and always (1)">
<text text-anchor="middle" font-family="Times-Roman" font-size="14.00" fill="#458759" dy="-0.2%"><textPath xlink:href="#path_edge_playbook_5df8cb54_play_72c4d77c" startOffset="229.96680000000003">1 Play: Demonstrate block.rescue and always (1)</textPath></text>
</a>
</g>
</g>
<!-- block_c8d755eb -->
<g id="block_c8d755eb" class="node">
<title>block_c8d755eb</title>
<g id="a_block_c8d755eb"><a xlink:href="/home/student/ansible_examples/ansible_block_rescue/playbook2.yaml" xlink:title="Attempt and graceful roll back demo">
<polygon fill="#458759" stroke="#458759" points="1250.09,-106 927.09,-106 927.09,-70 1250.09,-70 1250.09,-106"/>
<text text-anchor="middle" x="1088.59" y="-84.3" font-family="Times-Roman" font-size="14.00" fill="#ffffff">[block] Attempt and graceful roll back demo</text>
</a>
</g>
<links><link target="task_7eea6a9f" edge="edge_1_block_c8d755eb_task_7eea6a9f"/><link target="task_c0851f98" edge="edge_2_block_c8d755eb_task_c0851f98"/><link target="task_a72fbe54" edge="edge_3_block_c8d755eb_task_a72fbe54"/></links></g>
<!-- play_72c4d77c&#45;&gt;block_c8d755eb -->
<g id="edge_1_play_72c4d77c_block_c8d755eb" class="edge">
<title>play_72c4d77c-&gt;block_c8d755eb</title>
<g id="a_edge_1_play_72c4d77c_block_c8d755eb"><a xlink:title="1">
<path fill="none" stroke="#458759" d="M881.16,-88C892.91,-88 904.76,-88 916.52,-88" id="path_edge_1_play_72c4d77c_block_c8d755eb"/>
<polygon fill="#458759" stroke="#458759" points="916.82,-91.5 926.82,-88 916.82,-84.5 916.82,-91.5"/>
</a>
</g>
<g id="a_edge_1_play_72c4d77c_block_c8d755eb-label"><a xlink:title="1">
<text text-anchor="middle" font-family="Times-Roman" font-size="14.00" fill="#458759" dy="-0.2%"><textPath xlink:href="#path_edge_1_play_72c4d77c_block_c8d755eb" startOffset="25.87360000000001">1</textPath></text>
</a>
</g>
</g>
<!-- task_a72fbe54 -->
<g id="task_a72fbe54" class="node">
<title>task_a72fbe54</title>
<g id="a_task_a72fbe54"><a xlink:href="/home/student/ansible_examples/ansible_block_rescue/playbook2.yaml" xlink:title="Never print this">
<polygon fill="none" stroke="#458759" points="1478.01,-26.54 1478.01,-41.46 1426.53,-52 1353.73,-52 1302.26,-41.46 1302.26,-26.54 1353.73,-16 1426.53,-16 1478.01,-26.54"/>
<text text-anchor="middle" x="1390.13" y="-30.3" font-family="Times-Roman" font-size="14.00">Never print this</text>
</a>
</g>
</g>
<!-- block_c8d755eb&#45;&gt;task_a72fbe54 -->
<g id="edge_3_block_c8d755eb_task_a72fbe54" class="edge">
<title>block_c8d755eb-&gt;task_a72fbe54</title>
<g id="a_edge_3_block_c8d755eb_task_a72fbe54"><a xlink:title="3 ">
<path fill="none" stroke="#458759" d="M1189.75,-69.94C1230.18,-62.65 1276.06,-54.38 1313.6,-47.62" id="path_edge_3_block_c8d755eb_task_a72fbe54"/>
<polygon fill="#458759" stroke="#458759" points="1314.24,-51.06 1323.46,-45.84 1313,-44.17 1314.24,-51.06"/>
</a>
</g>
<g id="a_edge_3_block_c8d755eb_task_a72fbe54-label"><a xlink:title="3 ">
<text text-anchor="middle" font-family="Times-Roman" font-size="14.00" fill="#458759" dy="-0.2%"><textPath xlink:href="#path_edge_3_block_c8d755eb_task_a72fbe54" startOffset="93.6423236188008">3 </textPath></text>
</a>
</g>
</g>
<!-- task_c0851f98 -->
<g id="task_c0851f98" class="node">
<title>task_c0851f98</title>
<g id="a_task_c0851f98"><a xlink:href="/home/student/ansible_examples/ansible_block_rescue/playbook2.yaml" xlink:title="Force a failure">
<polygon fill="none" stroke="#458759" points="1470.53,-80.54 1470.53,-95.46 1423.43,-106 1356.83,-106 1309.74,-95.46 1309.74,-80.54 1356.83,-70 1423.43,-70 1470.53,-80.54"/>
<text text-anchor="middle" x="1390.13" y="-84.3" font-family="Times-Roman" font-size="14.00">Force a failure</text>
</a>
</g>
</g>
<!-- block_c8d755eb&#45;&gt;task_c0851f98 -->
<g id="edge_2_block_c8d755eb_task_c0851f98" class="edge">
<title>block_c8d755eb-&gt;task_c0851f98</title>
<g id="a_edge_2_block_c8d755eb_task_c0851f98"><a xlink:title="2 ">
<path fill="none" stroke="#458759" d="M1250.32,-88C1267.28,-88 1284.06,-88 1299.77,-88" id="path_edge_2_block_c8d755eb_task_c0851f98"/>
<polygon fill="#458759" stroke="#458759" points="1299.93,-91.5 1309.93,-88 1299.93,-84.5 1299.93,-91.5"/>
</a>
</g>
<g id="a_edge_2_block_c8d755eb_task_c0851f98-label"><a xlink:title="2 ">
<text text-anchor="middle" font-family="Times-Roman" font-size="14.00" fill="#458759" dy="-0.2%"><textPath xlink:href="#path_edge_2_block_c8d755eb_task_c0851f98" startOffset="35.582000000000036">2 </textPath></text>
</a>
</g>
</g>
<!-- task_7eea6a9f -->
<g id="task_7eea6a9f" class="node">
<title>task_7eea6a9f</title>
<g id="a_task_7eea6a9f"><a xlink:href="/home/student/ansible_examples/ansible_block_rescue/playbook2.yaml" xlink:title="Print a message">
<polygon fill="none" stroke="#458759" points="1480.23,-134.54 1480.23,-149.46 1427.45,-160 1352.81,-160 1300.04,-149.46 1300.04,-134.54 1352.81,-124 1427.45,-124 1480.23,-134.54"/>
<text text-anchor="middle" x="1390.13" y="-138.3" font-family="Times-Roman" font-size="14.00">Print a message</text>
</a>
</g>
</g>
<!-- block_c8d755eb&#45;&gt;task_7eea6a9f -->
<g id="edge_1_block_c8d755eb_task_7eea6a9f" class="edge">
<title>block_c8d755eb-&gt;task_7eea6a9f</title>
<g id="a_edge_1_block_c8d755eb_task_7eea6a9f"><a xlink:title="1 ">
<path fill="none" stroke="#458759" d="M1189.75,-106.06C1229.7,-113.26 1274.96,-121.42 1312.26,-128.14" id="path_edge_1_block_c8d755eb_task_7eea6a9f"/>
<polygon fill="#458759" stroke="#458759" points="1312.09,-131.67 1322.55,-130 1313.33,-124.78 1312.09,-131.67"/>
</a>
</g>
<g id="a_edge_1_block_c8d755eb_task_7eea6a9f-label"><a xlink:title="1 ">
<text text-anchor="middle" font-family="Times-Roman" font-size="14.00" fill="#458759" dy="-0.2%"><textPath xlink:href="#path_edge_1_block_c8d755eb_task_7eea6a9f" startOffset="92.6077186645481">1 </textPath></text>
</a>
</g>
</g>
</g>
</svg>